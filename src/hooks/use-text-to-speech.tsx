import * as Speech from 'expo-speech';import { useEffect, useState } from 'react';import { selectMuted, useAppSelector } from '@/store';type TextToSpeechType = {    speak: (text: string | string[]) => void;    stop: () => void;    isSpeaking: boolean;}export function useTextToSpeech(): TextToSpeechType {    const [isSpeaking, setSpeaking] = useState(false)    const isMuted = useAppSelector(selectMuted);    const speak = (text: string | string[]) => {        if(isMuted) return;        if(typeof text === 'string') {            Speech.speak(text, {                onStart: () => setSpeaking(true),                voice: "en-au-x-aub-local",            });        } else {            text.forEach((paragraph: string, idx) => {                setTimeout(() => speak(paragraph), idx * 1000);            })        }    };    const stop = () => {        Speech.stop().then(() => setSpeaking(false))    };    useEffect(() => {        if(isMuted) {            stop();        }    }, [isMuted]);    return { speak, stop, isSpeaking };}