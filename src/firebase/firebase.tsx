import auth, { FirebaseAuthTypes } from '@react-native-firebase/auth';import { User } from '@firebase/auth';import { db } from "@/config/firebase";import { Firestore, WhereFilterOp } from '@firebase/firestore';import { addDoc, collection, getDocs, query, where } from 'firebase/firestore';type FirebaseType = {    db: Firestore;    user: FirebaseAuthTypes.User | null;    fetchCollection: () => Promise<any | null>;    fetchQuery: (field: string, operator: WhereFilterOp, value: string) => Promise<any> | null;    addQuery: (newData: any) => Promise<any> | null;    signOut: () => void;}type FirebaseProps = {    collectionId: string;}export function useFirebase({collectionId}: FirebaseProps): FirebaseType {    const myAuth = auth();    const user = myAuth.currentUser;    const myCollection = collection(db, collectionId);    const fetchCollection = async () => {        if(user) {            const q = query(myCollection, where("userId", "==", user.uid));            const data = await getDocs(q);            return data.docs.map((doc) => ({...doc.data(), id: doc.id}))        } else {            console.log("No user logged in");            return Promise.resolve(null);        }    }    const fetchQuery = async (field: string, operator: WhereFilterOp, value: string) => {        if(user) {            const q = query(myCollection, where(field, operator, value));            const data = await getDocs(q);            return data.docs.map((doc) => ({...doc.data(), id: doc.id}))        } else {            console.log("No user logged in");            return null;        }    }    const addQuery = async (newData: any) => {        if (user) {            await addDoc(myCollection, {userId: user.uid, ...newData});            return await fetchCollection();        } else {            console.log("No user logged in");            return null;        }    }    function signOut() {        auth()            .signOut()            .then(() => console.log('User signed out!'));    }    return { db, user, fetchCollection, fetchQuery, addQuery, signOut };}