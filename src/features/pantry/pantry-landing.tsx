import Ionicons from '@expo/vector-icons/Ionicons';import { useIsFocused } from '@react-navigation/native';import React, { useState } from 'react';import { View, StyleSheet } from 'react-native';import { ThemedCardView } from '@/components/card';import { TabHeading } from '@/components/tab-heading/tab-heading';import { ThemedText } from '@/components/text/themed-text';import { themedColors } from '@/constants';import { PantryItem } from '@/domain';import { AddPantryModal } from '@/features/pantry/pantry-add-modal';import { ViewPantryModal } from '@/features/pantry/pantry-view-modal';import { selectUserPantryItem, useAppSelector } from '@/store';interface PantryLandingState {    isFocused: boolean;    isAddModalOpen: boolean;    isViewModalOpen: boolean;    pantryItems: PantryItem[];    selectedPantryItem: PantryItem | null;}type PantryLandingAction =    | 'isFocused'    | 'isAddModalOpen'    | 'isViewModalOpen'    | 'selectedPantryItem';const initialState: PantryLandingState = {    isFocused: false,    isAddModalOpen: false,    isViewModalOpen: false,    pantryItems: [],    selectedPantryItem: null,};export function PantryLanding() {    const [state, setState] = useState<PantryLandingState>(initialState);    state.isFocused = useIsFocused();    state.pantryItems = useAppSelector(selectUserPantryItem);    const updateState = (name: PantryLandingAction, value: any) => {        setState((prevState) => ({            ...prevState,            [name]: value,        }));    };    const onItemSelect = (itemId: string) => {        updateState(            'selectedPantryItem',            state.pantryItems.find((pantryItem) => pantryItem.id === itemId),        );        updateState('isViewModalOpen', true);    };    return (        <>            {state.isFocused && (                <>                    <AddPantryModal                        isOpen={state.isAddModalOpen}                        onClose={() => updateState('isAddModalOpen', false)}                    />                    <ViewPantryModal                        isOpen={state.isViewModalOpen}                        onClose={() => updateState('isViewModalOpen', false)}                        selectedPantryItem={state.selectedPantryItem}                    />                    <View style={styles.content}>                        <TabHeading title={'Pantry'} />                        <View style={styles.titleContainer}>                            <ThemedText>                                Keep track of what's in your pantry and always                                have a fresh bean ready to roast.                            </ThemedText>                        </View>                        <View style={styles.listContainer}>                            {state.pantryItems.map((pantryItem) => (                                <ThemedCardView                                    key={pantryItem.id}                                    id={pantryItem.id}                                    onPress={() => onItemSelect(pantryItem.id)}                                >                                    <View style={styles.cardRow}>                                        <View style={styles.cardCol}>                                            <ThemedText type={'subtitle'}>                                                {pantryItem.blendName}                                            </ThemedText>                                            <ThemedText type={'default'}>                                                {pantryItem.roasterName}                                            </ThemedText>                                        </View>                                        <View style={styles.cardCol}>                                            <ThemedText                                                style={styles.roastText}                                                type={'defaultSemiBold'}                                            >                                                RD: {pantryItem.roastDate}                                            </ThemedText>                                            <ThemedText                                                style={styles.expiryText}                                                type={'defaultSemiBold'}                                            >                                                ED: {pantryItem.expiryDate}                                            </ThemedText>                                        </View>                                    </View>                                </ThemedCardView>                            ))}                            <ThemedCardView                                id={'add'}                                icon={                                    <Ionicons.Button                                        name="add"                                        size={32}                                        backgroundColor={'transparent'}                                        color={themedColors.tertiary}                                    />                                }                                onPress={() =>                                    updateState('isAddModalOpen', true)                                }                            >                                <ThemedText type={'subtitle'}>                                    ADD BAG                                </ThemedText>                            </ThemedCardView>                        </View>                    </View>                </>            )}        </>    );}const styles = StyleSheet.create({    titleContainer: {        flexDirection: 'row',        alignItems: 'center',        gap: 8,    },    listContainer: {        gap: 8,        flexDirection: 'column',    },    content: {        flex: 1,        padding: 32,        gap: 16,        overflow: 'hidden',    },    cardRow: {        flexDirection: 'row',        width: '100%',        justifyContent: 'space-between',        alignItems: 'center',    },    cardCol: {        flexDirection: 'column',    },    roastText: {        fontSize: 12,        lineHeight: 14,        color: 'black',    },    expiryText: {        fontSize: 12,        lineHeight: 14,        color: themedColors.tertiary,    },});