import Ionicons from '@expo/vector-icons/Ionicons';import React, { useEffect } from 'react';import {    Button,    StyleSheet,    TouchableWithoutFeedback,    View,} from 'react-native';import Animated, {    FadeIn,    LinearTransition,    SlideInRight,    SlideOutRight,} from 'react-native-reanimated';import { Roaster, ServerBean } from '@/domain'import { ThemedDropdown, DropdownData } from '@/components/dropdown';import { ThemedText } from '@/components/text/themed-text';import { themedColors } from '@/constants/themed-colors';import { useAppSelector } from '@/store';import {    selectRemoteBeans,    selectRemoteRoasters,} from '@/store/slice/remote-data-slice';import { serverBeansToDropdown, serverRoastersToDropdown } from '@/usecase';import { globalStyles } from '@/styles/global-styles';import { StateType, useCustomState } from '@/hooks/useCustomState';import { FormState } from "@/features/recipes";import {    blendIdToBlend,    filterBlendsWithRoasterId,    findServerBlendName,    findServerRoasterName,    roasterIdToRoaster} from "@/features/recipes/beans/usecase";type SearchBeanProps = {    updateParentState: (state: StateType<FormState>) => void;};interface SearchBeanState {    allBlends?: ServerBean[];    allRoasters?: Roaster[];    roastersDropdown?: DropdownData[];    blendsDropdown?: DropdownData[];    selectedRoaster?: Roaster;    selectedBlend?: ServerBean;}const initialState = {    allBlends: [],    allRoasters: [],    roastersDropdown: [],    blendsDropdown: [],    selectedRoaster: undefined,    selectedBlend: undefined,};export function SearchBean({ updateParentState }: SearchBeanProps) {    const { state, updateState } = useCustomState<SearchBeanState>({        ...initialState,        allBlends: useAppSelector(selectRemoteBeans),        allRoasters: useAppSelector(selectRemoteRoasters),        roastersDropdown: serverRoastersToDropdown(useAppSelector(selectRemoteRoasters)),    });    const onRoasterSelect = (id: string) => {        if(id === '') return        updateState({                selectedRoaster: roasterIdToRoaster(id, state.allRoasters!),                blendsDropdown: serverBeansToDropdown(                    filterBlendsWithRoasterId(id, state.allBlends!)                ),            }        );    };    const onBlendSelect = (id: string) => {        if(id === '') return        updateState({                selectedBlend: blendIdToBlend(id, state.allBlends!),            }        );    };    const onSave = () => {        updateParentState({            isSearch: false,            blendName: state.selectedBlend!.blendName,            roaster: state.selectedRoaster!.name,            tastingNotes: state.selectedBlend!                .tastingNotes                .replaceAll('[', '')                .replaceAll(']', '')        });    };    useEffect(() => {        updateState({            ...state,            selectedRoaster: undefined,            selectedBlend: undefined,            blendsDropdown: [],        });    }, []);    return (        <TouchableWithoutFeedback >            <Animated.View                entering={SlideInRight.delay(50)}                exiting={SlideOutRight}                layout={LinearTransition}                style={globalStyles.innerModal}            >                <View >                    <ThemedText type={'subtitle'} >                        Search For a Bean                    </ThemedText >                    <Ionicons.Button                        name="arrow-back"                        size={24}                        backgroundColor={'transparent'}                        color={themedColors.tertiary}                        onPress={() => updateParentState({isSearch: false})}                    />                </View >                <ThemedText type={'default'} >                    Add your bean profile, or use the search tool above.                </ThemedText >                <View style={styles.content} >                    <ThemedDropdown                        placeholder="Roaster"                        data={state.roastersDropdown}                        onChange={(value: string) => onRoasterSelect(value)}                    />                    {state.blendsDropdown && state.blendsDropdown.length > 0 && (                        <Animated.View entering={FadeIn} >                            <ThemedDropdown                                onChange={(value) => onBlendSelect(value)}                                data={state.blendsDropdown}                                placeholder="Blend Name"                            />                        </Animated.View >                    )}                    <Animated.View layout={LinearTransition} >                        <Button                            title={'SAVE'}                            color={themedColors.primary}                            onPress={onSave}                        />                    </Animated.View >                </View >            </Animated.View >        </TouchableWithoutFeedback >    );}const styles = StyleSheet.create({    content: {        gap: 8,    },});