import Ionicons from '@expo/vector-icons/Ionicons';import React, { useEffect, useState } from 'react';import {    Button,    LayoutAnimation,    StyleSheet,    TouchableWithoutFeedback,    View,} from 'react-native';import Animated, {    FadeIn,    LinearTransition,    SlideInRight,    SlideOutRight,} from 'react-native-reanimated';import { ThemedDropdown, DropdownData } from '@/components/dropdown';import { ThemedText } from '@/components/text/themed-text';import { themedColors } from '@/constants';import { FormState, FormStateAction } from '@/features/recipes/beans/types';import { useAppSelector } from '@/store';import {    selectRemoteBeans,    selectRemoteRoasters,} from '@/store/slice/remote-data-slice';import { serverBeansToDropdown, serverRoastersToDropdown } from '@/usecase';interface SearchBeanState {    roasters: DropdownData[];    selectedRoaster: string;    selectedRoasterId: string;    blends: DropdownData[];    selectedBlendId: string;}type SearchBeanProps = {    formState: FormState;    updateState: (name: FormStateAction, value: any) => void;};export function SearchBean({ formState, updateState }: SearchBeanProps) {    const roasters = serverRoastersToDropdown(        useAppSelector(selectRemoteRoasters),    );    const allBlends = useAppSelector(selectRemoteBeans);    const [state, setState] = useState<SearchBeanState>({        roasters: roasters,        selectedRoaster: '',        selectedRoasterId: '',        blends: [],        selectedBlendId: '',    });    const onRoasterSelect = (id: string) => {        const filteredBlends = allBlends.filter((b) => b.roasterId === id);        if (!filteredBlends) return;        setState((prevState) => ({            ...prevState,            selectedRoaster:                roasters.find((roaster) => roaster.value === id)?.value ?? '',            blends: serverBeansToDropdown(filteredBlends),        }));    };    const onSave = () => {        updateState('isSearch', false);    };    useEffect(() => {        setState((prevState) => ({            ...prevState,            selectedRoaster: '',            selectedRoasterId: '',            selectedBlendId: '',            blends: [],        }));    }, []);    useEffect(() => {        LayoutAnimation.easeInEaseOut();    }, [state]);    return (        <TouchableWithoutFeedback>            <Animated.View                entering={SlideInRight.delay(50)}                exiting={SlideOutRight}            >                <Animated.View                    layout={LinearTransition}                    style={styles.modalInner}                >                    <View style={styles.titleContainer}>                        <ThemedText type={'subtitle'}>                            Search For a Bean                        </ThemedText>                        <Ionicons.Button                            name="arrow-back"                            size={24}                            backgroundColor={'transparent'}                            color={themedColors.tertiary}                            onPress={() => updateState('isSearch', false)}                        />                    </View>                    <ThemedText type={'default'} style={styles.titleContainer}>                        Add your bean profile, or use the search tool above.                    </ThemedText>                    <View style={styles.content}>                        <ThemedDropdown                            placeholder="Roaster"                            data={state.roasters}                            onChange={(value: string) => onRoasterSelect(value)}                        />                        {state.blends && state.blends.length > 0 && (                            <Animated.View entering={FadeIn}>                                <ThemedDropdown                                    onChange={(value) => {}}                                    data={state.blends}                                    placeholder="Blend Name"                                />                            </Animated.View>                        )}                        <Animated.View layout={LinearTransition}>                            <Button                                title={'SAVE'}                                color={themedColors.primary}                                onPress={onSave}                            />                        </Animated.View>                    </View>                </Animated.View>            </Animated.View>        </TouchableWithoutFeedback>    );}const styles = StyleSheet.create({    titleContainer: {        flexDirection: 'row',        alignItems: 'center',        marginBottom: 16,        justifyContent: 'space-between',    },    content: {        gap: 8,    },    modalInner: {        width: '100%',        paddingHorizontal: 16,        paddingVertical: 12,        backgroundColor: 'white',        borderRadius: 8,    },});