import Ionicons from '@expo/vector-icons/Ionicons';import React, { useEffect } from 'react';import {    Button,    StyleSheet,    TouchableWithoutFeedback,    View,} from 'react-native';import Animated, {    FadeIn,    LinearTransition,    SlideInRight,    SlideOutRight,} from 'react-native-reanimated';import { ServerBean } from '@/domain'import { ThemedDropdown, DropdownData } from '@/components/dropdown';import { ThemedText } from '@/components/text/themed-text';import { themedColors } from '@/constants/themed-colors';import { FormStateAction } from '@/features/recipes/beans/types';import { useAppSelector } from '@/store';import {    selectRemoteBeans,    selectRemoteRoasters,} from '@/store/slice/remote-data-slice';import { serverBeansToDropdown, serverRoastersToDropdown } from '@/usecase';import { globalStyles } from '@/styles/global-styles';import { StateType, useCustomState } from '@/hooks/useCustomState';type SearchBeanProps = {    updateParentState: (state: StateType<FormStateAction>) => void;};interface SearchBeanState {    allBlends: ServerBean[];    roasters: DropdownData[];    selectedRoaster: string;    selectedRoasterId: string;    blends: DropdownData[];    selectedBlendId: string;}type UpdateStateAction = 'roasters' | 'selectedRoaster' | 'selectedRoasterId' | 'blends' | 'selectedBlendId';const initialState = {    allBlends: [],    roasters: [],    selectedRoaster: '',    selectedRoasterId: '',    blends: [],    selectedBlendId: '',};export function SearchBean({ updateParentState }: SearchBeanProps) {    const { state, updateState } = useCustomState<SearchBeanState, UpdateStateAction>({        ...initialState,        allBlends: useAppSelector(selectRemoteBeans),        roasters: serverRoastersToDropdown(useAppSelector(selectRemoteRoasters)),    });    const onRoasterSelect = (id: string) => {        const filteredBlends = state.allBlends.filter((b) => b.roasterId === id);        if (!filteredBlends) return;        updateState({                'selectedRoaster': state.roasters.find((roaster) => roaster.value === id)?.value ?? '',                'blends': serverBeansToDropdown(filteredBlends),            }        );    };    const onSave = () => {        updateParentState({            'isSearch': false,            'blendName': 'IVE GOT A DIRTY WILLY',            'roaster': 'really dirty'        });    };    useEffect(() => {        updateState({            ...state,            'selectedRoaster': '',            'selectedRoasterId': '',            'selectedBlendId': '',            'blends': []        });    }, []);    return (        <TouchableWithoutFeedback >            <Animated.View                entering={SlideInRight.delay(50)}                exiting={SlideOutRight}                layout={LinearTransition}                style={globalStyles.innerModal}            >                <View >                    <ThemedText type={'subtitle'} >                        Search For a Bean                    </ThemedText >                    <Ionicons.Button                        name="arrow-back"                        size={24}                        backgroundColor={'transparent'}                        color={themedColors.tertiary}                        onPress={() => updateParentState({'isSearch': false})}                    />                </View >                <ThemedText type={'default'} >                    Add your bean profile, or use the search tool above.                </ThemedText >                <View style={styles.content} >                    <ThemedDropdown                        placeholder="Roaster"                        data={state.roasters}                        onChange={(value: string) => onRoasterSelect(value)}                    />                    {state.blends && state.blends.length > 0 && (                        <Animated.View entering={FadeIn} >                            <ThemedDropdown                                onChange={(value) => {}}                                data={state.blends}                                placeholder="Blend Name"                            />                        </Animated.View >                    )}                    <Animated.View layout={LinearTransition} >                        <Button                            title={'SAVE'}                            color={themedColors.primary}                            onPress={onSave}                        />                    </Animated.View >                </View >            </Animated.View >        </TouchableWithoutFeedback >    );}const styles = StyleSheet.create({    content: {        gap: 8,    },});