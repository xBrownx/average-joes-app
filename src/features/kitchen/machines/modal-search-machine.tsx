import Ionicons from '@expo/vector-icons/Ionicons';import React, { useEffect, useState } from 'react';import {    Button,    LayoutAnimation,    StyleSheet,    TouchableWithoutFeedback,    View,} from 'react-native';import Animated, {    FadeIn,    LinearTransition,    SlideInRight,    SlideOutRight,} from 'react-native-reanimated';import { ThemedDropdown, DropdownData } from '@/components/dropdown';import { ThemedText } from '@/components/text/themed-text';import { themedColors } from '@/constants/themed-colors';import { FormState } from '@/features/kitchen/machines/types';import { useAppSelector } from '@/store';import { selectRemoteMachines } from '@/store/slice/remote-data-slice';import { serverBlendsToDropdown, serverMachinesToDropdown } from '@/usecase';import { StateType, useCustomState } from '@/hooks/useCustomState';import { filterBlendsWithRoasterId, roasterIdToRoaster } from '@/features/kitchen/recipes/usecase';interface SearchMachineState {    makesList?: DropdownData[];    selectedMake?: string;    modelsList?: DropdownData[];    selectedModel?: string;}type SearchMachineProps = {    updateParentState: (state: StateType<FormState>) => void;};export function SearchMachine({ updateParentState }: SearchMachineProps) {    const allMachines = useAppSelector(selectRemoteMachines);    const { state, updateState } = useCustomState<SearchMachineState>({        makesList: serverMachinesToDropdown(allMachines),        modelsList: [],        selectedMake: '',        selectedModel: '',    });    const onMakeSelect = (id: string) => {        if(id === '') return        updateState({                selectedMake: id,            }        );    };    const onModelSelect = (id: string) => {    };    const onSave = () => {        updateParentState({isSearch: false});    };    useEffect(() => {        updateState({            ...state,            modelsList: [],            selectedMake: '',            selectedModel: '',        });    }, []);    useEffect(() => {        LayoutAnimation.easeInEaseOut();    }, [state]);    return (        <TouchableWithoutFeedback>            <Animated.View                entering={SlideInRight.delay(50)}                exiting={SlideOutRight}            >                <Animated.View                    layout={LinearTransition}                    style={styles.modalInner}                >                    <View style={styles.titleContainer}>                        <ThemedText type={'subtitle'}>                            Search For a Bean                        </ThemedText>                        <Ionicons.Button                            name="arrow-back"                            size={24}                            backgroundColor={'transparent'}                            color={themedColors.tertiary}                            onPress={() => updateParentState({isSearch: false})}                        />                    </View>                    <ThemedText type={'default'} style={styles.titleContainer}>                        Add your bean profile, or use the search tool above.                    </ThemedText>                    <View style={styles.content}>                        <ThemedDropdown                            placeholder="Make"                            data={state.makesList}                            value={state.selectedMake?? null}                            onChange={(value: string) => onMakeSelect(value)}                        />                        {state.modelsList && state.modelsList.length > 0 && (                            <Animated.View entering={FadeIn}>                                <ThemedDropdown                                    placeholder="Model"                                    data={state.modelsList}                                    value={state.selectedModel?? null}                                    onChange={(value) => onModelSelect(value)}                                />                            </Animated.View>                        )}                        <Animated.View layout={LinearTransition}>                            <Button                                title={'SAVE'}                                color={themedColors.primary}                                onPress={onSave}                            />                        </Animated.View>                    </View>                </Animated.View>            </Animated.View>        </TouchableWithoutFeedback>    );}const styles = StyleSheet.create({    titleContainer: {        flexDirection: 'row',        alignItems: 'center',        marginBottom: 16,        justifyContent: 'space-between',    },    content: {        gap: 8,    },    modalInner: {        width: '100%',        paddingHorizontal: 16,        paddingVertical: 12,        backgroundColor: 'white',        borderRadius: 8,    },});