import Ionicons from '@expo/vector-icons/Ionicons';import React, { useEffect } from 'react';import {    Button,    StyleSheet,    TouchableWithoutFeedback,    View,} from 'react-native';import Animated, {    FadeIn,    LinearTransition,    SlideInRight,    SlideOutRight,} from 'react-native-reanimated';import { ThemedDropdown, DropdownData } from '@/components/dropdown';import { ThemedText } from '@/components/text/themed-text';import { themedColors } from '@/constants/themed-colors';import { globalStyles } from '@/styles/global-styles';import { StateType, useCustomState } from '@/hooks/useCustomState';import { FormState } from "@/features/kitchen";import { useBlendSearch } from "@/features/kitchen/hooks";interface SearchBlendState {    selectedRoaster?: string;    selectedBlend?: string;}type SearchBlendProps = {    updateParentState: (state: StateType<FormState>) => void;};export function SearchBlend({ updateParentState }: SearchBlendProps) {    const {        roasterDropdown,        blendDropdown,        filterBlends,        getRoasterWithId,        getBlendWithId,    } = useBlendSearch()    const { state, updateState } = useCustomState<SearchBlendState>({        selectedRoaster: '',        selectedBlend: '',    });    const onRoasterSelect = (roasterId: string) => {        if(roasterId === '') return        filterBlends(roasterId);        updateState({selectedRoaster: roasterId});    };    const onBlendSelect = (blendId: string) => {        if(blendId === '') return        updateState({selectedBlend: blendId});    };    const onSave = () => {        const roaster = getRoasterWithId(state.selectedRoaster?? '');        const blend = getBlendWithId(state.selectedBlend?? '');        if(!roaster || !blend) return;        updateParentState({            isSearch: false,            blendName: blend.name,            roaster: roaster.name,            tastingNotes: blend                .tastingNotes                .replaceAll('[', '')                .replaceAll(']', '')        });    };    useEffect(() => {        updateState({            selectedRoaster: '',            selectedBlend: '',        });    }, []);    return (        <TouchableWithoutFeedback >            <Animated.View                entering={SlideInRight.delay(50)}                exiting={SlideOutRight}                layout={LinearTransition}                style={globalStyles.innerModal}            >                <View >                    <ThemedText type={'subtitle'} >                        Search For a Blend                    </ThemedText >                    <Ionicons.Button                        name="arrow-back"                        size={24}                        backgroundColor={'transparent'}                        color={themedColors.tertiary}                        onPress={() => updateParentState({isSearch: false})}                    />                </View >                <ThemedText type={'default'} >                    Add your blend profile, or use the search tool above.                </ThemedText >                <View style={styles.content} >                    <ThemedDropdown                        placeholder="Roaster"                        data={roasterDropdown}                        value={state.selectedRoaster?? ''}                        onChange={(value: string) => onRoasterSelect(value)}                    />                    {blendDropdown.length > 0 && (                        <Animated.View entering={FadeIn} >                            <ThemedDropdown                                placeholder="Blend Name"                                data={blendDropdown}                                value={state.selectedBlend?? ''}                                onChange={(value) => onBlendSelect(value)}                            />                        </Animated.View >                    )}                    <Animated.View layout={LinearTransition} >                        <Button                            title={'SAVE'}                            color={themedColors.primary}                            onPress={onSave}                        />                    </Animated.View >                </View >            </Animated.View >        </TouchableWithoutFeedback >    );}const styles = StyleSheet.create({    content: {        gap: 8,    },});